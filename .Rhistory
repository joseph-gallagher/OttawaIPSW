plot_time_acc(f7_pr, c_f7, title = "Floor 7")
#plot_time_acc(f2_pr, c_f2, title = "Floor 2")
#plot_time_acc(f3_pr, c_f3, title = "Floor 3")
#plot_time_acc(f4_pr, c_f4, title = "Floor 4")
#plot_time_acc(f5_pr, c_f5, title = "Floor 5")
png("Images/F6_acc.png")
plot_time_acc(f6_pr, c_f6, title = "Floor 6")
dev.off()
png("Images/F7_acc.png")
plot_time_acc(f7_pr, c_f7, title = "Floor 7")
dev.off()
library(hms)
library(tidyr)
df <- data.frame("Time"=names(f1_pr),
"Typical Weekday" = c_f1$centers[1,],
"Atypical Weekday" = c_f1$centers[2,],
"Weekend"=c_f1$centers[3,])
df$Time <- parse_hms(df$Time)
df <- df %>%
gather(key = "day_type", value = "wifi_devices", -Time)
png("Images/F1_profiles.png")
ggplot(df, aes(x = Time, y = wifi_devices)) +
geom_line(aes(color = day_type), size = 1) +
labs(x = "Time", y = "Wifi Enabled Devices",
title = "Typical Profiles: Floor 1", day_type = "Day Type" ) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
theme_minimal()
dev.off()
library(hms)
library(tidyr)
df <- data.frame("Time"=names(f1_pr),
"Typical Weekday" = c_f1$centers[1,],
"Atypical Weekday" = c_f1$centers[2,],
"Weekend"=c_f1$centers[3,])
df$Time <- parse_hms(df$Time)
df <- df %>%
gather(key = "Type", value = "wifi_devices", -Time)
ggplot(df, aes(x = Time, y = wifi_devices)) +
geom_line(aes(color = Type), size = 1) +
labs(x = "Time", y = "Wifi Enabled Devices",
title = "Typical Profiles: Floor 1", day_type = "Day Type" ) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
theme_minimal()
library(hms)
library(tidyr)
df <- data.frame("Time"=names(f1_pr),
"Typical Weekday" = c_f1$centers[1,],
"Atypical Weekday" = c_f1$centers[2,],
"Weekend"=c_f1$centers[3,])
df$Time <- parse_hms(df$Time)
df <- df %>%
gather(key = "Type", value = "wifi_devices", -Time)
png("Images/F1_profiles.png")
ggplot(df, aes(x = Time, y = wifi_devices)) +
geom_line(aes(color = Type), size = 1) +
labs(x = "Time", y = "Wifi Enabled Devices",
title = "Typical Profiles: Floor 1", day_type = "Day Type" ) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
theme_minimal()
dev.off()
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
png("Images/Binning.png")
plot_error(dat, clu)
dev.off()
#Takes a list of data, e.g. list(f1_pr, f2_pr) and a list of clusters, e.g. list(c_f1, c_f2)
#so that accuracies may vary over time.
plot_error <- function(data, clustering){
error <- c()
times <- parse_hms(names(data[[1]])[72:181])
#Calculate the equivalent of b[1] for a given t and add it to the errors
for(i in 1:110){
a <- c()
for(j in 1:length(data)){
a_new <- improve_real(data[[j]], clustering[[j]], i)[1]/max(data[[j]])
a <- append(a, a_new)
}
error <- append(error, mean(a))
}
dt <- data.frame("Time" = times, "Error" = error*100)
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = dt$Time[150], y = 12, label = "No Binning")
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
}
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
plot_error(dat, clu)
#Takes a list of data, e.g. list(f1_pr, f2_pr) and a list of clusters, e.g. list(c_f1, c_f2)
#so that accuracies may vary over time.
plot_error <- function(data, clustering){
error <- c()
times <- parse_hms(names(data[[1]])[72:181])
#Calculate the equivalent of b[1] for a given t and add it to the errors
for(i in 1:110){
a <- c()
for(j in 1:length(data)){
a_new <- improve_real(data[[j]], clustering[[j]], i)[1]/max(data[[j]])
a <- append(a, a_new)
}
error <- append(error, mean(a))
}
dt <- data.frame("Time" = times, "Error" = error*100)
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = dt$Time[150], y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
}
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
plot_error(dat, clu)
#Takes a list of data, e.g. list(f1_pr, f2_pr) and a list of clusters, e.g. list(c_f1, c_f2)
#so that accuracies may vary over time.
plot_error <- function(data, clustering){
error <- c()
times <- parse_hms(names(data[[1]])[72:181])
#Calculate the equivalent of b[1] for a given t and add it to the errors
for(i in 1:110){
a <- c()
for(j in 1:length(data)){
a_new <- improve_real(data[[j]], clustering[[j]], i)[1]/max(data[[j]])
a <- append(a, a_new)
}
error <- append(error, mean(a))
}
dt <- data.frame("Time" = times, "Error" = error*100)
x_0 <- dt$Time[150]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
}
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
plot_error(dat, clu)
#Takes a list of data, e.g. list(f1_pr, f2_pr) and a list of clusters, e.g. list(c_f1, c_f2)
#so that accuracies may vary over time.
plot_error <- function(data, clustering){
error <- c()
times <- parse_hms(names(data[[1]])[72:181])
#Calculate the equivalent of b[1] for a given t and add it to the errors
for(i in 1:110){
a <- c()
for(j in 1:length(data)){
a_new <- improve_real(data[[j]], clustering[[j]], i)[1]/max(data[[j]])
a <- append(a, a_new)
}
error <- append(error, mean(a))
}
dt <- data.frame("Time" = times, "Error" = error*100)
x_0 <- dt$Time[120]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
}
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
plot_error(dat, clu)
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
dt <- plot_error(dat,clu)
#Takes a list of data, e.g. list(f1_pr, f2_pr) and a list of clusters, e.g. list(c_f1, c_f2)
#so that accuracies may vary over time.
plot_error <- function(data, clustering){
error <- c()
times <- parse_hms(names(data[[1]])[72:181])
#Calculate the equivalent of b[1] for a given t and add it to the errors
for(i in 1:110){
a <- c()
for(j in 1:length(data)){
a_new <- improve_real(data[[j]], clustering[[j]], i)[1]/max(data[[j]])
a <- append(a, a_new)
}
error <- append(error, mean(a))
}
dt <- data.frame("Time" = times, "Error" = error*100)
dt
}
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
dt <- plot_error(dat,clu)
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
x_0 = dt$Time[120]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
x_0 = dt$Time[120]
x_0
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
x_0 = dt$Time[80]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Binning")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Binning")+
theme_minimal()
print(gg)
x_0 = dt$Time[95]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Matching")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Matching")+
theme_minimal()
print(gg)
x_0 = dt$Time[95]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Matching")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Matching")+
theme_minimal()
print(gg)
ggsave("Images/Matching.png")
print(gg)
ggsave("Images/Matching.png")
library(hms)
library(tidyr)
df <- data.frame("Time"=names(f1_pr),
"Typical Weekday" = c_f1$centers[1,],
"Atypical Weekday" = c_f1$centers[2,],
"Weekend"=c_f1$centers[3,])
df$Time <- parse_hms(df$Time)
df <- df %>%
gather(key = "Type", value = "wifi_devices", -Time)
png("Images/F1_profiles.png")
ggplot(df, aes(x = Time, y = wifi_devices)) +
geom_line(aes(color = Type), size = 1) +
labs(x = "Time", y = "Wifi Enabled Devices",
title = "Floor 1", day_type = "Day Type" ) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
theme_minimal()
dev.off()
fifth_wifi
head(fifth_floor)
source('~/Work/Real Jobs/Ottawa IPSW/Data Exploration.R')
plot(fifth_floor)
head(fifth_floor)
source('~/Work/Real Jobs/Ottawa IPSW/K-means preprocessing.R')
source('~/Work/Real Jobs/Ottawa IPSW/K-means preprocessing.R')
clust <- kmeans(day_profiles, centers = 3)
day_profiles <- split_days(second_floor)
clust <- kmeans(day_profiles, centers = 3)
print(clust)
plot_time_acc(day_profiles, clust)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
fifth_floor <- read_excel("DataWithGroundtruth.xlsx",
sheet = 1)
sixth_floor <- read_excel("DataWithGroundtruth.xlsx",
sheet = 2)
seventh_floor <- read_excel("DataWithGroundtruth.xlsx",
sheet = 3)
simple <- function(floor){
#Get the floor's various sensor readings
floor_wifi <- dplyr::select(floor, contains("AP"))
floor_md <- dplyr::select(floor, contains("MD"))
floor_CO2 <- dplyr::select(floor, contains("CO2"))
floor_power <- dplyr::select(floor, contains("Power"))
#Compute summary statistics for each sensor and
#collect into a data frame
sum_wifi <- rowSums(floor_wifi)
sum_md <- rowSums(floor_md)
sum_CO2 <- rowSums(floor_CO2)
sum_power <- rowSums(floor_power)
floor_summary <- cbind.data.frame("wifi" = sum_wifi,
"power" = sum_power,
"CO2" = sum_CO2,
"md" = sum_md,
"Groundtruth" = floor$Groundtruth)
floor_summary <- na.omit(floor_summary)
floor_summary
}
fifth_data <- simple(fifth_floor)
fifth_simple_model <- lm(Groundtruth ~ . ,data = fifth_data)
anova(fifth_simple_model)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data)
fifth_wifi_model$coefficients
fifth_simple_model <- lm(Groundtruth ~ . ,data = fifth_data)
anova(fifth_simple_model)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data)
fifth_wifi_model$summary
fifth_simple_model <- lm(Groundtruth ~ . ,data = fifth_data)
anova(fifth_simple_model)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data)
summary(fifth_wifi_model)
fifth_simple_model <- lm(Groundtruth ~ . ,data = fifth_data)
anova(fifth_simple_model)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data
fifth_plus_power <- lm(Groundtruth ~ wifi + power. ,data = fifth_data)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data)
fifth_plus_power <- lm(Groundtruth ~ wifi + power. ,data = fifth_data)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data)
fifth_plus_power <- lm(Groundtruth ~ wifi + power, data = fifth_data)
anova(fifth_wifi_model, fifth_plus_power)
fifth_wifi_model <- lm(Groundtruth ~ wifi, data = fifth_data)
fifth_plus_power <- lm(Groundtruth ~ wifi + power, data = fifth_data)
fifth_plus_md <- lm(Groundtruth ~ wifi + md, data = fifth_data)
fifth_plus_CO2 <- lm(Groundtruth ~ wifi + CO2, data = fifth_data)
anova(fifth_wifi_model, fifth_plus_power)
anova(fifth_wifi_model, fifth_plus_md)
anova(fifth_wifi_model, fifth_plus_CO2)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
f1 <- read_excel("WiFi/Floor1.xlsx", sheet = 1)
f2 <- read_excel("WiFi/Floor2.xlsx", sheet = 1)
f3 <- read_excel("WiFi/Floor3.xlsx", sheet = 1)
f4 <- read_excel("WiFi/Floor4.xlsx", sheet = 1)
f5 <- read_excel("WiFi/Floor5.xlsx", sheet = 1)
f6 <- read_excel("WiFi/Floor6.xlsx", sheet = 1)
f7 <- read_excel("WiFi/Floor7.xlsx", sheet = 1)
split_days <- function(floor){
#Rename the first index to be time:
names(floor)[1] <- c("Time")
#Sum the sensors and extract just this information:
floor <- data.frame("Time" = floor$Time,
"sum" = rowSums(select(floor, -Time)))
#Find the indexes where the new days start
new_days <- c(1)
day_names <- c("01-23")
days <- format(floor$Time, "%d")
months <- format(floor$Time, "%m")
for(i in 1:(nrow(floor)-1)){
current_slice_day = days[i]
next_slice_day = days[i+1]
if(current_slice_day != next_slice_day){
new_days <- append(new_days, i+1)
day_names <- append(day_names,
paste0(months[i+1], "-", days[i+1]))
}
}
#Make a list of vectors by extracting the relevant chunks
time_slices <- format(floor$Time, "%H:%M:%S")
day_profiles <- data.frame()
for(i in 1:(length(new_days)-2)){
start = new_days[i]
end = new_days[i+1]-1
day_profiles <- rbind(day_profiles, name = floor$sum[start:end])
}
#Rename the rows and columns
names(day_profiles) <- time_slices[1:287]
row.names(day_profiles) <- day_names[1:119]
#Return cleaned data
day_profiles
}
f1_pr <- split_days(f1)
f2_pr <- split_days(f2)
f3_pr <- split_days(f3)
f4_pr <- split_days(f4)
f5_pr <- split_days(f5)
f6_pr <- split_days(f6)
f7_pr <- split_days(f7)
elbow_plot <- function(data, m){
ssq <- c()
for(i in 2:m){
cc <- kmeans(data, centers=i)
ssq <- append(ssq, cc$tot.withinss)
}
plot(ssq, type = "l", xlab = "Clusters",
ylab = "Total Inter-Cluster Residual")
}
par(mfrow = c(2,2))
elbow_plot(f1_pr, 10)
elbow_plot(f2_pr, 10)
elbow_plot(f3_pr, 10)
elbow_plot(f4_pr, 10)
set.seed(77)
c_f1 <- kmeans(f1_pr, centers=3)
par(mfrow=c(3,1))
plot(c_f1$centers[1,])
plot(c_f1$centers[2,])
plot(c_f1$centers[3,])
library(hms)
library(tidyr)
df <- data.frame("Time"=names(f1_pr),
"Typical Weekday" = c_f1$centers[1,],
"Atypical Weekday" = c_f1$centers[2,],
"Weekend"=c_f1$centers[3,])
df$Time <- parse_hms(df$Time)
df <- df %>%
gather(key = "Type", value = "wifi_devices", -Time)
ggplot(df, aes(x = Time, y = wifi_devices)) +
geom_line(aes(color = Type), size = 1) +
labs(x = "Time", y = "Wifi Enabled Devices",
title = "Floor 1", day_type = "Day Type" ) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
theme_minimal()
library(hms)
library(tidyr)
library(ggplot2)
df <- data.frame("Time"=names(f1_pr),
"Typical Weekday" = c_f1$centers[1,],
"Atypical Weekday" = c_f1$centers[2,],
"Weekend"=c_f1$centers[3,])
df$Time <- parse_hms(df$Time)
df <- df %>%
gather(key = "Type", value = "wifi_devices", -Time)
ggplot(df, aes(x = Time, y = wifi_devices)) +
geom_line(aes(color = Type), size = 1) +
labs(x = "Time", y = "Wifi Enabled Devices",
title = "Floor 1", day_type = "Day Type" ) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
theme_minimal()
devtools::install_github("jayjacobs/ggcal")
devtools::install_github("jayjacobs/ggcal")
mydate <- seq(as.Date("2017-02-01"), as.Date("2017-07-31"), by="1 day")
myfills <- ifelse(format(mydate, "%w") %in% c(0,6), "weekend" ,"weekday")
head(myfills)
ggcal(mydate, myfills) + scale_fill_manual(values=c("weekday"="steelblue", "weekend"="lightsteelblue"))
library(ggcal)
ggcal(mydate, myfills) + scale_fill_manual(values=c("weekday"="steelblue", "weekend"="lightsteelblue"))
head(f1_pr)
head(c_f1$cluster_
)
head(c_f1$cluster)
head(c_f1$cluster == True)
head(c_f1$cluster == 1)
head(names(c_f1$cluster))
tail(c_f1$cluster)
knitr::opts_chunk$set(echo = TRUE)
mydate <- seq(as.Date("2018-01-23"), as.Date("2018-05-21"), by="1 day")
myfills <- ifelse(c_f1$cluster == 1, 'cluster 1', ifelse(c_f1$cluster == 2, 'cluster 2', 'cluster 3'))
ggcal(mydate, myfills) + scale_fill_manual(values=c("cluster 1"="steelblue", "cluster 2"="lightsteelblue", "cluster 3"="orange"))
mydate <- seq(as.Date("2018-01-23"), as.Date("2018-05-21"), by="1 day")
myfills <- ifelse(c_f1$cluster == 1, 'Cluster 1', ifelse(c_f1$cluster == 2, 'Cluster 2', 'Cluster 3'))
ggcal(mydate, myfills) + scale_fill_manual(values=c("Cluster 1"="#00AFBB", "cluster 2"="lightsteelblue", "cluster 3"="orange"))
mydate <- seq(as.Date("2018-01-23"), as.Date("2018-05-21"), by="1 day")
myfills <- ifelse(c_f1$cluster == 1, 'Cluster 1', ifelse(c_f1$cluster == 2, 'Cluster 2', 'Cluster 3'))
ggcal(mydate, myfills) + scale_fill_manual(values=c("Cluster 1"="#00AFBB", "cluster 2"="#E7B800", "cluster 3"="#FC4E07"))
mydate <- seq(as.Date("2018-01-23"), as.Date("2018-05-21"), by="1 day")
myfills <- ifelse(c_f1$cluster == 1, 'Cluster 1', ifelse(c_f1$cluster == 2, 'Cluster 2', 'Cluster 3'))
ggcal(mydate, myfills) + scale_fill_manual(values=c("Cluster 1"="#00AFBB", "Cluster 2"="#E7B800", "Cluster 3"="#FC4E07"))
#Takes a list of data, e.g. list(f1_pr, f2_pr) and a list of clusters, e.g. list(c_f1, c_f2)
#so that accuracies may vary over time.
improve_real <- function(data, clustering, t){
centers <- clustering$centers
preds <- apply(data, 1, predict_type,
centers = clustering$centers,
t = t)
dt <- cbind(data, preds)
error <- apply(dt, 1, function(x){sum((x[1:(length(x)-1)] - centers[x[length(x)],])^2) }  )
w_clust <- sqrt(sum(error)/(nrow(data)*ncol(data)))
no_clust <- sqrt(clustering$totss/(nrow(data)*ncol(data)))
result <- c(w_clust, no_clust)
}
plot_error <- function(data, clustering){
error <- c()
times <- parse_hms(names(data[[1]])[72:181])
#Calculate the equivalent of b[1] for a given t and add it to the errors
for(i in 1:110){
a <- c()
for(j in 1:length(data)){
a_new <- improve_real(data[[j]], clustering[[j]], i)[1]/max(data[[j]])
a <- append(a, a_new)
}
error <- append(error, mean(a))
}
dt <- data.frame("Time" = times, "Error" = error*100)
dt
}
dat <- list(f1_pr, f2_pr, f3_pr, f4_pr, f5_pr, f6_pr, f7_pr)
clu <- list(c_f1, c_f2, c_f3, c_f4, c_f5, c_f6, c_f7)
dt <- plot_error(dat,clu)
x_0 = dt$Time[95]
gg <- ggplot(data = dt, aes(x = Time, y = Error))+
geom_line(color = "#00AFBB", size = 2)+
geom_hline(yintercept = 11.46, col="black")+
annotate("text", x = x_0, y = 12, label = "No Matching")+
labs(y = "Mean Measurement Error (% of capacity)",
x = "Time at Matching")+
theme_minimal()
print(gg)
